var n=(u,t,e)=>new Promise((a,r)=>{var o=c=>{try{s(e.next(c))}catch(i){r(i)}},m=c=>{try{s(e.throw(c))}catch(i){r(i)}},s=c=>c.done?a(c.value):Promise.resolve(c.value).then(o,m);s((e=e.apply(u,t)).next())});import{updateCartNumber as l}from"./header.js";import{setLocalStorage as d}from"./utils.js";export default class p{getLocalStorage(t){return JSON.parse(localStorage.getItem(t))}addToCart(t){return n(this,null,function*(){const e=t.details;let a=(yield JSON.parse(localStorage.getItem("so-cart")))||[],r=this.incrementQuantity(e,a);var o;r!=-1?o=r:(t.details.quantity=1,o=[...a,t.details]),d("so-cart",o),l(),document.querySelector(".cart").classList.add("cart-animate"),setTimeout(function(){document.querySelector(".cart").classList.remove("cart-animate")},2e3)})}removeFromCart(t){const e=t.target.dataset.id,a=this.getLocalStorage("so-cart"),r=[];for(const o of a)o.Id!=e&&r.push(o);localStorage.setItem("so-cart",JSON.stringify(r)),this.getCartContents(),l()}incrementQuantity(t,e){for(let a of e)if(t.Id==a.Id)return a.quantity+=1,e;return-1}updateQuantity(t){return n(this,null,function*(){const e=parseInt(t.target.value),a=t.target.dataset.id;(e<=0||e==null||e==null||isNaN(e))&&this.removeFromCart(t);let r=(yield JSON.parse(localStorage.getItem("so-cart")))||[],o=this.setQuantity(a,r,e);d("so-cart",o),this.getCartContents(),l(),document.querySelector(".cart").classList.add("cart-animate"),setTimeout(function(){document.querySelector(".cart").classList.remove("cart-animate")},2e3)})}setQuantity(t,e,a){for(let r of e)if(t==r.Id)return r.quantity=a,e;return e}getCartContents(){try{const t=this.getLocalStorage("so-cart");if(t.length==0)document.querySelector(".product-list").innerHTML="<p>No items currently in your cart</p>";else{const e=this.calcTotal();document.querySelector(".cart-total").innerHTML="$"+e.toFixed(2),document.querySelector(".cart-footer").classList.remove("hide");const a=t.map(r=>this.renderCartItem(r));document.querySelector(".product-list").innerHTML=a.join(""),document.querySelectorAll(".remove").forEach(r=>r.addEventListener("click",o=>this.removeFromCart(o))),document.querySelectorAll(".cart-quantity").forEach(r=>r.addEventListener("change",o=>this.updateQuantity(o)))}}catch(t){document.querySelector(".product-list").innerHTML="<p>No items currently in your cart</p>"}}calcTotal(){const t=this.getLocalStorage("so-cart");let e=0;for(let a of t)e+=a.ListPrice*a.quantity;return e}getTotalCartItems(){let t=0;const e=this.getLocalStorage("so-cart");for(let a of e)t+=a.quantity;return t}renderCartItem(t){const e=`<li class="cart-card divider">
        <a href="/product_pages/product-details.html?product=${t.Id}" class="cart-card__image">
          <img
            src="${t.Images.PrimaryMedium}"
            alt="${t.Name}"
          />
        </a>
        <div>
        <a href="/product_pages/product-details.html?product=${t.Id}">
          <h2 class="card__name">${t.Name}</h2>
        </a>
        <span class='remove' data-id="${t.Id}">REMOVE</span>
        </div>
        <p class="cart-card__color">${t.Colors[0].ColorName}</p>
        <p class="cart-card__quantity">qty: <input class="cart-quantity" data-id="${t.Id}" type="text" value="${t.quantity}"></p>
        <p class="cart-card__price">$${t.FinalPrice}</p>
      </li>`;return e}packageItems(){const t=this.getLocalStorage("so-cart"),e=t.map(a=>this.smallItem(a));return e}smallItem(t){return{id:t.Id,name:t.Name,price:t.FinalPrice,quantity:t.quantity}}}
